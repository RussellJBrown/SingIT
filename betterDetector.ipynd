
Skip to content
Pull requests
Issues
Marketplace
Explore
@RussellJBrown

1
1

    1

RussellJBrown/SingIT
Code
Issues 0
Pull requests 0
Actions
Projects 0
Wiki
Security
Insights
Settings
SingIT/Machine Prototypes 1.ipynb
@wtleblond wtleblond Add files via upload c3650d6 35 minutes ago
659 lines (659 sloc) 56.5 KB
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import scipy.signal as signal \n",
    "from scipy.interpolate import interp1d \n",
    "import IPython.display as ipd\n",
    "import scipy.io.wavfile as wav\n",
    "\n",
    "import librosa\n",
    "import sklearn\n",
    "\n",
    "target = np.append([\"English\"]*90,[\"French\"]*90)\n",
    "target = np.append(target,[\"Japanese\"]*90)\n",
    "target = np.append(target,[\"German\"]*90)\n",
    "\n",
    "EnglishPks = np.array([[0]*13]*90)\n",
    "FrenchPks = np.array([[0]*13]*90)\n",
    "JapanesePks = np.array([[0]*13]*90)\n",
    "GermanPks = np.array([[0]*13]*90)\n",
    "\n",
    "with open(\"EnglishPeaks30.txt\",'r') as file:\n",
    "    data = file.read().replace('\\n', ' ')\n",
    "    data = data.replace('  ',' ')\n",
    "    data = data.split()\n",
    "    for i in np.arange(90):\n",
    "        for j in np.arange(13):\n",
    "            EnglishPks[i][j] = int(data[i*13+j])\n",
    "with open(\"FrenchPeaks30.txt\",'r') as file:\n",
    "    data = file.read().replace('\\n', ' ')\n",
    "    data = data.replace('  ',' ')\n",
    "    data = data.split()\n",
    "    for i in np.arange(90):\n",
    "        for j in np.arange(13):\n",
    "            FrenchPks[i][j] = int(data[i*13+j])\n",
    "with open(\"JapanesePeaks30.txt\",'r') as file:\n",
    "    data = file.read().replace('\\n', ' ')\n",
    "    data = data.replace('  ',' ')\n",
    "    data = data.split()\n",
    "    for i in np.arange(90):\n",
    "        for j in np.arange(13):\n",
    "            JapanesePks[i][j] = int(data[i*13+j])\n",
    "with open(\"GermanPeaks30.txt\",'r') as file:\n",
    "    data = file.read().replace('\\n', ' ')\n",
    "    data = data.replace('  ',' ')\n",
    "    data = data.split()\n",
    "    for i in np.arange(90):\n",
    "        for j in np.arange(13):\n",
    "            GermanPks[i][j] = int(data[i*13+j])\n",
    "\n",
    "'''\n",
    "longtarget = np.append([\"English\"]*900,[\"French\"]*900)\n",
    "longtarget = np.append(longtarget,[\"Japanese\"]*900)\n",
    "longtarget = np.append(longtarget,[\"German\"]*900)\n",
    "\n",
    "allNormalMean = np.append(np.append(normalEnglishMean,normalFrenchMean),np.append(normalJapaneseMean,normalGermanMean))\n",
    "allNormalStd = np.append(np.append(normalEnglishStd,normalFrenchStd),np.append(normalJapaneseStd,normalGermanStd))\n",
    "allVeMean = np.append(np.append(veEnglishMean,veFrenchMean),np.append(veJapaneseMean,veGermanMean))\n",
    "allVeStd = np.append(np.append(veEnglishStd,veFrenchStd),np.append(veJapaneseStd,veGermanStd))\n",
    "'''\n",
    "\n",
    "allPks = np.append(np.append(EnglishPks,FrenchPks,axis=0),np.append(JapanesePks,GermanPks,axis=0),axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[25 17 20 ...  5  8  8]\n",
      " [13  4 13 ...  7  7  5]\n",
      " [37 45 28 ...  6  5  6]\n",
      " ...\n",
      " [ 9  8  4 ...  5  6  8]\n",
      " [ 4  3  3 ...  1  2  1]\n",
      " [11 17  6 ...  5  7 10]]\n",
      "360\n"
     ]
    }
   ],
   "source": [
    "print(allPks)\n",
    "print(len(allPks))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x1a01f4c0a58>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "English13 = [0]*90\n",
    "French13 = [0]*90\n",
    "Japanese13 = [0]*90\n",
    "German13 = [0]*90\n",
    "\n",
    "bandnum = 13\n",
    "\n",
    "for i in np.arange(90):\n",
    "    English13[i] = EnglishPks[i][bandnum-1]\n",
    "    French13[i] = FrenchPks[i][bandnum-1]\n",
    "    Japanese13[i] = JapanesePks[i][bandnum-1]\n",
    "    German13[i] = GermanPks[i][bandnum-1]\n",
    "\n",
    "English13 = np.sort(English13)\n",
    "French13 = np.sort(French13)\n",
    "Japanese13 = np.sort(Japanese13)\n",
    "German13 = np.sort(German13)\n",
    "\n",
    "EnglishTarget = [4]*90\n",
    "FrenchTarget = [3]*90\n",
    "JapaneseTarget = [2]*90\n",
    "GermanTarget = [1]*90\n",
    "yaxis90 = np.arange(90)+1\n",
    "\n",
    "plt.scatter(English13,yaxis90)\n",
    "plt.scatter(French13,yaxis90)\n",
    "plt.scatter(Japanese13,yaxis90)\n",
    "plt.scatter(German13,yaxis90)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "bands = np.array([[[0]*90]*4]*13)\n",
    "\n",
    "for i in np.arange(13):\n",
    "    for j in np.arange(90):\n",
    "        bands[i][0][j] = EnglishPks[j][i]\n",
    "        bands[i][1][j] = FrenchPks[j][i]\n",
    "        bands[i][2][j] = JapanesePks[j][i]\n",
    "        bands[i][3][j] = GermanPks[j][i]\n",
    "    for j in np.arange(4):\n",
    "        bands[i][j] = np.sort(bands[i][j])\n",
    "    \n",
    "def findPercentile(bnum, lnum, index):\n",
    "    locs = np.where(bands[bnum][lnum]==index)[0]\n",
    "    if len(locs) > 0:\n",
    "        return int(np.max(locs)+1)\n",
    "    elif index == 0:\n",
    "        return 0\n",
    "    else:\n",
    "        return findPercentile(bnum,lnum,index-1)\n",
    "\n",
    "def predictor(arr, printStuff, printMatrix, printPredictions):\n",
    "    if len(arr) < 13:\n",
    "        print(\"Incompatible array size.\")\n",
    "    else:\n",
    "        bmatrix = np.array([[0]*4]*13)\n",
    "        for i in np.arange(13):\n",
    "            for j in np.arange(4):\n",
    "                outof90 = int(findPercentile(i, j, arr[i]))\n",
    "                #print(type(outof90))\n",
    "                bmatrix[i][j] = abs(outof90 - int(90 - outof90))\n",
    "    bmatrix = bmatrix//2\n",
    "    predictions = np.array([0]*4)\n",
    "    for i in np.arange(13):\n",
    "        for j in np.arange(4):\n",
    "            predictions[j] = predictions[j] + bmatrix[i][j]\n",
    "    if printStuff > 0:\n",
    "        print(\"This was predicted as:\")\n",
    "        if predictions[0] == np.min(predictions):\n",
    "            print(\"\\tEnglish\")\n",
    "        if predictions[1] == np.min(predictions):\n",
    "            print(\"\\tFrench\")\n",
    "        if predictions[2] == np.min(predictions):\n",
    "            print(\"\\tJapanese\")\n",
    "        if predictions[3] == np.min(predictions):\n",
    "            print(\"\\tGerman\")\n",
    "    if printMatrix > 0:\n",
    "        print(bmatrix)\n",
    "    if printPredictions > 0:\n",
    "        print(predictions)\n",
    "    if predictions[0] == np.min(predictions):\n",
    "            return 0\n",
    "    elif predictions[1] == np.min(predictions):\n",
    "            return 1\n",
    "    elif predictions[2] == np.min(predictions):\n",
    "            return 2\n",
    "    elif predictions[3] == np.min(predictions):\n",
    "            return 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[32  8 21 29]\n",
      " [27 15 17 31]\n",
      " [23  3 46 18]\n",
      " [17  8 14 51]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1a01fabce48>"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAP4AAAECCAYAAADesWqHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAACPdJREFUeJzt3U+InPUdx/HPJ5PVxETJoTmEJFRBEcSClm0uQg/BQioUe9SDJyFQsCgUipcepH+OQg+lEGpoC6IIWhCxSA6KSP2TNURrjJZUENc/RGsl7lqMu357yLQkumVn0+f3PDv7eb9gYScOM58n8b3Pzuwk46oSgCybhh4AoH+EDwQifCAQ4QOBCB8IRPhAoKkO3/YB22/aPmX73qH3dMn2Ydunbb829JYWbO+1/bTtk7ZP2L576E1dsb3F9ku2Xxkf231Db/oqT+vP8W2PJP1N0vckzUs6Kun2qnp90GEdsf1dSQuS/lhV1w+9p2u2d0naVVXHbF8u6WVJP9wIf362LWlbVS3YnpH0nKS7q+qFgaf91zSf8fdJOlVVb1XVWUkPS7p14E2dqapnJX089I5Wqur9qjo2/vxTSScl7R52VTfqnIXxxZnxx7o6w05z+LslvXPe5XltkP9x0ti+UtKNkl4cdkl3bI9sH5d0WtKRqlpXxzbN4XuFX1tXX1WxOtvbJT0q6Z6qOjP0nq5U1XJV3SBpj6R9ttfVw7VpDn9e0t7zLu+R9N5AW3ARxo9/H5X0YFU9NvSeFqrqE0nPSDow8JQLTHP4RyVdY/sq25dIuk3S4wNvwoTGT4A9IOlkVd0/9J4u2d5pe8f4862Sbpb0xrCrLjS14VfVkqS7JD2lc08MPVJVJ4Zd1R3bD0l6XtK1tudt3zn0po7dJOkOSfttHx9/3DL0qI7skvS07Vd17gR1pKqeGHjTBab2x3kALt7UnvEBXDzCBwIRPhCI8IFAhA8EmvrwbR8cekNLHN90W6/HN/XhS1qXv7Ed4vim27o8vo0QPoA1avICntEV22pm547Ob3cly2cWNbpiWy/39R+Xvrvc232dXf6XLhlt7e3+JOnsjpne7mv5s0WNLuv3z+/LS/t70drywqJG2/s7vqV//FPLC4sr/QW2C2xuceczO3doz69+1OKm14Wrf7Zh/hLZit79wa6hJzR15tqloSc088Evfz3R9fhWHwhE+EAgwgcCET4QiPCBQIQPBCJ8IBDhA4EIHwhE+EAgwgcCET4QiPCBQIQPBCJ8IBDhA4EIHwhE+EAgwgcCET4QiPCBQIQPBJoofNsHbL9p+5Tte1uPAtDWquHbHkn6jaTvS7pO0u22r2s9DEA7k5zx90k6VVVvVdVZSQ9LurXtLAAtTRL+bknvnHd5fvxrAKbUJOGv9D5cX3vzMdsHbc/Znls+s/j/LwPQzCThz0vae97lPZLe++qVqupQVc1W1Wzfb2IJYG0mCf+opGtsX2X7Ekm3SXq87SwALa36brlVtWT7LklPSRpJOlxVJ5ovA9DMRG+TXVVPSnqy8RYAPeGVe0AgwgcCET4QiPCBQIQPBCJ8IBDhA4EIHwhE+EAgwgcCET4QiPCBQIQPBCJ8IBDhA4EIHwhE+EAgwgcCET4QiPCBQIQPBCJ8INBE/7z2WtUXm7T8wdYWN70ufPqtLUNPaGrr6S+HntDUwre/GHpCO6OvvbvdijjjA4EIHwhE+EAgwgcCET4QiPCBQIQPBCJ8IBDhA4EIHwhE+EAgwgcCET4QiPCBQIQPBCJ8IBDhA4EIHwhE+EAgwgcCET4QiPCBQIQPBCJ8INCq4ds+bPu07df6GASgvUnO+L+XdKDxDgA9WjX8qnpW0sc9bAHQEx7jA4E6C9/2QdtztueWFxa7ulkADXQWflUdqqrZqpodbd/W1c0CaIBv9YFAk/w47yFJz0u61va87TvbzwLQ0ubVrlBVt/cxBEB/+FYfCET4QCDCBwIRPhCI8IFAhA8EInwgEOEDgQgfCET4QCDCBwIRPhCI8IFAhA8EInwgEOEDgQgfCET4QCDCBwIRPhCI8IFAhA8EWvWf174Ym76Qtny4cb+mXPanvww9oamf/v2vQ09o6t5fHBx6QjOnz0zW3catE8D/RPhAIMIHAhE+EIjwgUCEDwQifCAQ4QOBCB8IRPhAIMIHAhE+EIjwgUCEDwQifCAQ4QOBCB8IRPhAIMIHAhE+EIjwgUCEDwQifCAQ4QOBVg3f9l7bT9s+afuE7bv7GAagnUneSWdJ0k+q6pjtyyW9bPtIVb3eeBuARlY941fV+1V1bPz5p5JOStrdehiAdtb0GN/2lZJulPRiizEA+jFx+La3S3pU0j1VdWaF/37Q9pztuaXPFrvcCKBjE4Vve0bnon+wqh5b6TpVdaiqZqtqdvNl27rcCKBjkzyrb0kPSDpZVfe3nwSgtUnO+DdJukPSftvHxx+3NN4FoKFVf5xXVc9Jcg9bAPSEV+4BgQgfCET4QCDCBwIRPhCI8IFAhA8EInwgEOEDgQgfCET4QCDCBwIRPhCI8IFAhA8EInwgEOEDgQgfCET4QCDCBwIRPhCI8IFAk7xb7pptOitd/vaXLW56XRhdfdXQE5r6+Y+/M/SEpo7+7rdDT2hm39yHE12PMz4QiPCBQIQPBCJ8IBDhA4EIHwhE+EAgwgcCET4QiPCBQIQPBCJ8IBDhA4EIHwhE+EAgwgcCET4QiPCBQIQPBCJ8IBDhA4EIHwhE+EAgwgcCrRq+7S22X7L9iu0Ttu/rYxiAdiZ5J53PJe2vqgXbM5Kes/3nqnqh8TYAjawaflWVpIXxxZnxR7UcBaCtiR7j2x7ZPi7ptKQjVfXiCtc5aHvO9tzS54td7wTQoYnCr6rlqrpB0h5J+2xfv8J1DlXVbFXNbr50W9c7AXRoTc/qV9Unkp6RdKDJGgC9mORZ/Z22d4w/3yrpZklvtB4GoJ1JntXfJekPtkc694Xikap6ou0sAC1N8qz+q5Ju7GELgJ7wyj0gEOEDgQgfCET4QCDCBwIRPhCI8IFAhA8EInwgEOEDgQgfCET4QCDCBwIRPhCI8IFAhA8EInwgEOEDgQgfCET4QCDCBwIRPhDI594Ts+MbtT+U9HbnN7yyb0j6qKf7GgLHN936Pr5vVtXO1a7UJPw+2Z6rqtmhd7TC8U239Xp8fKsPBCJ8INBGCP/Q0AMa4/im27o8vql/jA9g7TbCGR/AGhE+EIjwgUCEDwQifCDQvwEPrs/eBErrmwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 288x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "finalMatrix = np.array([[0]*4]*4)\n",
    "\n",
    "for i in np.arange(90):\n",
    "    a = predictor(EnglishPks[i],0,0,0)\n",
    "    finalMatrix[0][a] = finalMatrix[0][a] + 1\n",
    "    a = predictor(FrenchPks[i],0,0,0)\n",
    "    finalMatrix[1][a] = finalMatrix[1][a] + 1\n",
    "    a = predictor(JapanesePks[i],0,0,0)\n",
    "    finalMatrix[2][a] = finalMatrix[2][a] + 1\n",
    "    a = predictor(GermanPks[i],0,0,0)\n",
    "    finalMatrix[3][a] = finalMatrix[3][a] + 1\n",
    "    \n",
    "print(finalMatrix)\n",
    "\n",
    "plt.matshow(finalMatrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This was predicted as:\n",
      "\tGerman\n",
      "[328 327 372 284]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "EnglishSums = np.array([2531, 1894, 1942, 1816, 1638, 1510, 1211, 1050, 1069, 1110, 1017, 1100, 1420])/90\n",
    "FrenchSums = np.array([2233, 1830, 2065, 1753, 1698, 1364, 1150, 1130, 1104, 1022, 1131, 1199, 1494])/90\n",
    "GermanSums = np.array([2318, 1899, 1898, 1693, 1587, 1395, 1265, 1312, 1359, 1464, 1565, 1628, 2200])/90\n",
    "JapaneseSums = np.array([2546, 2021, 1838, 1886, 2132, 1930, 1454, 1056, 866, 815, 864, 897, 1163])/90\n",
    "xaxis13 = np.arange(13)+1\n",
    "\n",
    "# inputarr is where you put the numbers you want to test for a single song.\n",
    "inputarr = np.array([45, 50, 28, 18, 13, 9, 11, 17, 15, 18, 31, 30, 50])\n",
    "\n",
    "predictor(inputarr,1,0,1)\n",
    "\n",
    "plt.scatter(xaxis13,EnglishSums) # Blue\n",
    "plt.scatter(xaxis13,FrenchSums) # Orange\n",
    "plt.scatter(xaxis13,JapaneseSums) # Green\n",
    "plt.scatter(xaxis13,GermanSums) # Red\n",
    "plt.scatter(xaxis13,inputarr) # Purple\n",
    "#plt.figure()\n",
    "#plt.scatter(xaxis13,EnglishSums)\n",
    "#plt.scatter(xaxis13,FrenchSums)\n",
    "#plt.figure()\n",
    "#plt.scatter(xaxis13,EnglishSums)\n",
    "#plt.scatter(xaxis13,JapaneseSums)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# EVERYTHING BEYOND THIS POINT IS GARBAGE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Band 1: French, 167.09265175718846% distance.\n",
      "Band 2: French, 298.4293193717275% distance.\n",
      "Band 3: Japanese, 492.511013215859% distance.\n",
      "Band 4: German, 597.4093264248701% distance.\n",
      "Band 5: German, 159.08256880733938% distance.\n",
      "Band 6: French, 2.473498233215539% distance.\n",
      "Band 7: French, 289.47368421052647% distance.\n",
      "Band 8: German, 220.61068702290078% distance.\n",
      "Band 9: English, 16.02434077079108% distance.\n",
      "Band 10: German, 79.5069337442219% distance.\n",
      "Band 11: French, 7.2753209700427925% distance.\n",
      "Band 12: German, 35.84131326949385% distance.\n",
      "Band 13: Japanese, 34.040501446480235% distance.\n"
     ]
    }
   ],
   "source": [
    "marginarr = [0.0]*13\n",
    "for i in np.arange(13):\n",
    "    vals = [EnglishSums[i],FrenchSums[i],JapaneseSums[i],GermanSums[i]]\n",
    "    marginarr[i] = np.max(vals) - np.min(vals)\n",
    "#print(marginarr)\n",
    "    \n",
    "inputarr = np.array([19, 14, 8, 6, 8, 15, 3, 21, 11, 22, 12, 21, 9])\n",
    "compmatrix = np.array([[0.0]*13]*4)\n",
    "\n",
    "for i in np.arange(13):\n",
    "    compmatrix[0][i] = abs(inputarr[i] - EnglishSums[i])\n",
    "    compmatrix[1][i] = abs(inputarr[i] - FrenchSums[i])\n",
    "    compmatrix[2][i] = abs(inputarr[i] - JapaneseSums[i])\n",
    "    compmatrix[3][i] = abs(inputarr[i] - GermanSums[i])\n",
    "#print(compmatrix)\n",
    "\n",
    "for i in np.arange(13):\n",
    "    vals = [compmatrix[0][i],compmatrix[1][i],compmatrix[2][i],compmatrix[3][i]]\n",
    "    if np.min(vals) == compmatrix[0][i]:\n",
    "        print(\"Band \"+str(i+1)+\": \"+\"English, \"+str(100*(compmatrix[0][i]/marginarr[i]))+\"% distance.\")\n",
    "    elif np.min(vals) == compmatrix[1][i]:\n",
    "        print(\"Band \"+str(i+1)+\": \"+\"French, \"+str(100*(compmatrix[1][i]/marginarr[i]))+\"% distance.\")\n",
    "    elif np.min(vals) == compmatrix[2][i]:\n",
    "        print(\"Band \"+str(i+1)+\": \"+\"Japanese, \"+str(100*(compmatrix[2][i]/marginarr[i]))+\"% distance.\")\n",
    "    else:\n",
    "        print(\"Band \"+str(i+1)+\": \"+\"German, \"+str(100*(compmatrix[3][i]/marginarr[i]))+\"% distance.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def printpredict(prediction, target):\n",
    "    for i in np.arange(len(prediction)):\n",
    "        print(str(i+1)+\". \"+target[i]+\" predicted as \"+prediction[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def lang2num(lang):\n",
    "    if lang == \"English\":\n",
    "        return 0\n",
    "    elif lang == \"French\":\n",
    "        return 1\n",
    "    elif lang == \"Japanese\":\n",
    "        return 2\n",
    "    elif lang == \"German\":\n",
    "        return 3\n",
    "    else:\n",
    "        return -1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def predictmatrix(prediction, target):\n",
    "    matrix = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]\n",
    "    for i in np.arange(len(prediction)):\n",
    "        a = lang2num(target[i])\n",
    "        b = lang2num(prediction[i])\n",
    "        matrix[a][b] += 1\n",
    "    return matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\n\\ntargetjg = np.append([\"Japanese\"]*90,[\"German\"]*90)\\njgNormalMean = np.append(normalJapaneseMean,normalGermanMean)\\n\\nmeanpredict = []\\nmeanscore = 0\\nkf = KFold(n_splits=18)\\nfor train, test in kf.split(jgNormalMean):\\n    xtrain = jgNormalMean[train].reshape(-1, 1)\\n    xtest = jgNormalMean[test].reshape(-1, 1)\\n    ytrain = targetjg[train]\\n    ytest = targetjg[test]\\n    clf = svm.SVC(kernel=\\'linear\\', C=1).fit(xtrain, ytrain)\\n    meanpredict = np.append(meanpredict, clf.predict(xtest))\\n    meanscore = meanscore + clf.score(xtest, ytest)/18.0\\n    print(clf.score(xtest, ytest))\\nmeanscore = meanscore * 100\\nprint(\"Score for normal mean centroid: \" + str(meanscore) + \"%\")\\n\\n'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import datasets\n",
    "from sklearn import svm\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.datasets import load_digits\n",
    "\n",
    "'''\n",
    "\n",
    "targetjg = np.append([\"Japanese\"]*90,[\"German\"]*90)\n",
    "jgNormalMean = np.append(normalJapaneseMean,normalGermanMean)\n",
    "\n",
    "meanpredict = []\n",
    "meanscore = 0\n",
    "kf = KFold(n_splits=18)\n",
    "for train, test in kf.split(jgNormalMean):\n",
    "    xtrain = jgNormalMean[train].reshape(-1, 1)\n",
    "    xtest = jgNormalMean[test].reshape(-1, 1)\n",
    "    ytrain = targetjg[train]\n",
    "    ytest = targetjg[test]\n",
    "    clf = svm.SVC(kernel='linear', C=1).fit(xtrain, ytrain)\n",
    "    meanpredict = np.append(meanpredict, clf.predict(xtest))\n",
    "    meanscore = meanscore + clf.score(xtest, ytest)/18.0\n",
    "    print(clf.score(xtest, ytest))\n",
    "meanscore = meanscore * 100\n",
    "print(\"Score for normal mean centroid: \" + str(meanscore) + \"%\")\n",
    "\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#print(meanpredict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[25 17 20 ...  5  8  8]\n",
      " [13  4 13 ...  7  7  5]\n",
      " [37 45 28 ...  6  5  6]\n",
      " ...\n",
      " [ 9  8  4 ...  5  6  8]\n",
      " [ 4  3  3 ...  1  2  1]\n",
      " [11 17  6 ...  5  7 10]]\n",
      "340 20\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Found input variables with inconsistent numbers of samples: [4420, 340]",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-31-98ae1320a3a5>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     12\u001b[0m     \u001b[0mytrain\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtarget\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mtrain\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     13\u001b[0m     \u001b[0mytest\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtarget\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mtest\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 14\u001b[1;33m     \u001b[0mclf\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0msvm\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mSVC\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkernel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'poly'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mC\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mxtrain\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mytrain\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     15\u001b[0m     \u001b[0mmeanpredict\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmeanpredict\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mclf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mxtest\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     16\u001b[0m     \u001b[0mmeanscore\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mmeanscore\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0mclf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mscore\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mxtest\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mytest\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m/\u001b[0m\u001b[0msplits\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\wtleb\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\sklearn\\svm\\base.py\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[0;32m    144\u001b[0m         X, y = check_X_y(X, y, dtype=np.float64,\n\u001b[0;32m    145\u001b[0m                          \u001b[0morder\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'C'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'csr'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 146\u001b[1;33m                          accept_large_sparse=False)\n\u001b[0m\u001b[0;32m    147\u001b[0m         \u001b[0my\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_validate_targets\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    148\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\wtleb\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\sklearn\\utils\\validation.py\u001b[0m in \u001b[0;36mcheck_X_y\u001b[1;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, warn_on_dtype, estimator)\u001b[0m\n\u001b[0;32m    727\u001b[0m         \u001b[0my\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfloat64\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    728\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 729\u001b[1;33m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    730\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    731\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\wtleb\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\sklearn\\utils\\validation.py\u001b[0m in \u001b[0;36mcheck_consistent_length\u001b[1;34m(*arrays)\u001b[0m\n\u001b[0;32m    203\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0muniques\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m>\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    204\u001b[0m         raise ValueError(\"Found input variables with inconsistent numbers of\"\n\u001b[1;32m--> 205\u001b[1;33m                          \" samples: %r\" % [int(l) for l in lengths])\n\u001b[0m\u001b[0;32m    206\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    207\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: Found input variables with inconsistent numbers of samples: [4420, 340]"
     ]
    }
   ],
   "source": [
    "meanpredict = []\n",
    "meanscore = 0\n",
    "\n",
    "print(allPks)\n",
    "\n",
    "splits = 18\n",
    "kf = KFold(n_splits=splits)\n",
    "for train, test in kf.split(allPks):\n",
    "    print(len(train),len(test))\n",
    "    xtrain = allPks[train].reshape(-1, 1)\n",
    "    xtest = allPks[test].reshape(-1, 1)\n",
    "    ytrain = target[train]\n",
    "    ytest = target[test]\n",
    "    clf = svm.SVC(kernel='poly', C=1).fit(xtrain, ytrain)\n",
    "    meanpredict = np.append(meanpredict, clf.predict(xtest))\n",
    "    meanscore = meanscore + clf.score(xtest, ytest)/splits\n",
    "    print(clf.score(xtest, ytest) * 100)\n",
    "meanscore = meanscore * 100\n",
    "print(\"Score for silibant detection: \" + str(meanscore) + \"%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0, 659, 92, 149], [155, 0, 173, 572], [82, 744, 0, 74], [46, 786, 68, 0]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1e9ff64bef0>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 288x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#printpredict(meanpredict,target)\n",
    "print(predictmatrix(meanpredict,longtarget))\n",
    "plt.matshow(predictmatrix(meanpredict,longtarget))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

    © 2019 GitHub, Inc.
    Terms
    Privacy
    Security
    Status
    Help

    Contact GitHub
    Pricing
    API
    Training
    Blog
    About
